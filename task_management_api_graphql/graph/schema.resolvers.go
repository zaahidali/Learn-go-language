package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.31

import (
	"context"
	"crypto/rand"
	"fmt"
	"math/big"

	"github.com/zaahidali/Learn-go-language/task_management_api_graphq/graph/model"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, name string, email string) (*model.User, error) {
	randNum, _ := rand.Int(rand.Reader, big.NewInt(100))
	user := &model.User{
		ID:    fmt.Sprintf("T%d", randNum),
		Name:  name,
		Email: email,
	}
	r.users = append(r.users, user)
	return user, nil
}

// CreateTask is the resolver for the createTask field.
func (r *mutationResolver) CreateTask(ctx context.Context, userID string, title string, description string, dueDate string) (*model.Task, error) {
	randNum, _ := rand.Int(rand.Reader, big.NewInt(1000))
	task := &model.Task{
		ID:          fmt.Sprintf("T%d", randNum),
		Title:       title,
		Description: description,
		DueDate:     dueDate,
	}
	r.tasks = append(r.tasks, task)
	return task, nil
}

// UpdateTask is the resolver for the updateTask field.
func (r *mutationResolver) UpdateTask(ctx context.Context, id string, title *string, description *string, status *model.TaskStatus, dueDate *string) (*model.Task, error) {
	for _, task := range r.tasks {
		if task.ID == id {
			task.Title = *title
			task.Description = *description
			task.Status = *status
			task.DueDate = *dueDate
			return task, nil
		}
	}
	return nil, fmt.Errorf("task not found")
}

// DeleteTask is the resolver for the deleteTask field.
func (r *mutationResolver) DeleteTask(ctx context.Context, id string) (string, error) {
	for i, user := range r.users {
		if user.ID == id {
			r.users = append(r.users[:i], r.users[i+1:]...)
			return id, nil
		}
	}
	return "", fmt.Errorf("task not found")
}

// GetUser is the resolver for the getUser field.
func (r *queryResolver) GetUser(ctx context.Context, id string) (*model.User, error) {
	for _, user := range r.users {
		if user.ID == id {
			return user, nil
		}
	}
	return nil, fmt.Errorf("User %s not found")
}

// GetTask is the resolver for the getTask field.
func (r *queryResolver) GetTask(ctx context.Context, id string) (*model.Task, error) {
	for _, task := range r.tasks {
		if task.ID == id {
			return task, nil
		}
	}
	return nil, fmt.Errorf("Task %s not found")
}

// GetTasks is the resolver for the getTasks field.
func (r *queryResolver) GetTasks(ctx context.Context) ([]*model.Task, error) {
	return r.tasks, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
